{"version":3,"sources":["components/Search.js","components/StockComponent.js","components/Stock.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","quote","undefined","searchOutput","e","preventDefault","target","elements","getQuote","value","trim","_this","props","history","push","concat","textChange","setState","react_default","a","createElement","className","onSubmit","this","onChange","placeholder","type","name","classNames","btn btn-secondary","btn btn-info","disabled","Component","StockComponent","_ref","_ref$latest","latest","symbol","price","high","low","latestDay","style","fontSize","dist_default","format","Link","to","class","STOCK_QUERY","gql","_templateObject","Stock","match","params","console","log","react_apollo_esm","query","variables","loading","error","data","Fragment","components_StockComponent","client","ApolloClient","uri","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28cda46d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\n\nclass Search extends Component {\n  state = {\n    quote: undefined\n  };  \n\n  searchOutput = (e) => {\n    e.preventDefault();\n    const quote = e.target.elements.getQuote.value.trim();\n    this.props.history.push(`/${quote}`);\n  };\n\n  textChange = (e) => {\n    this.setState({quote: e.target.value});\n  }\n  \n  render() {\n    return (\n      <div>\n        <p className = \"instructions\">Enter a North American company quote</p>\n        <form className = \"mt-4\" onSubmit = {this.searchOutput}>\n          <div className = \"input-group\">\n            <input \n              onChange = {this.textChange} \n              className = \"form-control form-control-lg\" \n              placeholder = \"example: AAPL\" type = \"text\" \n              name = \"getQuote\" \n            />\n            <div className = \"input-group-append\">\n              <button className = {classNames({\n                'btn btn-secondary': true,\n                'btn btn-info': this.state.quote\n              })} disabled = {!this.state.quote}>Get Info</button>\n            </div>\n          </div>\n        </form>\n        \n      </div>\n    )\n  }\n}\n\nexport default Search;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Moment from 'react-moment';\n\nconst StockComponent = ({latest: {symbol, price, high, low, latestDay}}) => (\n  <div className = \"card mt-4\">\n    {(symbol) ? (<div className = \"card-header\">\n      <h3 style = {{fontSize: '1.5rem'}}>{symbol}: <span className = \"text-success\"><Moment format = \"MMM Do, YYYY\">{latestDay}</Moment></span></h3>\n    </div>): null}\n      \n    {(price, high, low, latestDay) ? (<div className = \"card-body\">\n      <h4>Current Price: {price}</h4>\n      <h4>High: {high}</h4>\n      <h4>Low: {low}</h4>\n      <Link className = \"btn btn-warning mt-3\" to = '/'>Back to Search</Link>\n    </div>) : \n    <div className = \"card-body text-center\">\n      <p class = \"card-text text-danger\">You've entered an incorrect quote. Go back and try again.</p>\n      <Link className = \"btn btn-warning mt-3\" to = '/'>Back to Search</Link>\n    </div>}\n  </div> \n);\n\n\nexport default StockComponent;","import React from 'react';\nimport gql from 'graphql-tag';\nimport {Query} from 'react-apollo';\nimport StockComponent from './StockComponent';\n\nconst STOCK_QUERY = gql`\n  query StockQuery($quote: String!){\n    latest(quote: $quote) {\n      symbol\n      price\n      high\n      low\n      latestDay\n    }\n  }\n`\n\nconst Stock = (props) => {\n  let { quote } = props.match.params;\n  console.log(quote);\n    \n  return (\n    <div>\n      <Query query = {STOCK_QUERY} variables = {{quote}}>\n        {\n          ({loading, error, data}) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n              \n            console.log(data)\n            return (\n              <React.Fragment>\n                <StockComponent latest = {data.latest} />\n              </React.Fragment>\n            )     \n          }\n        }\n      </Query>\n    </div> \n  )\n}\n\nexport default Stock;","import React, { Component } from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport Search from './components/Search';\nimport Stock from './components/Stock';\nimport {BrowserRouter, Route} from \"react-router-dom\";\n\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client = {client}>\n        <BrowserRouter>\n          <div className=\"container appContainer\">\n            <div className = \"appComponents\">\n              \n              <h1 className = \"appTitle\">Stock Market Search</h1>\n              \n              <div className = \"centerComponents\">\n                <Route exact path = \"/\" component = {Search} />\n                <Route exact path = \"/:quote\" component = {Stock} />\n              </div>\n              \n            </div>\n            \n          </div>\n        </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}